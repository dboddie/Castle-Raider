; Copyright (C) 2013 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $0e00

.include "constants.oph"

; See the end of the file for included routines.

main:

    jsr clear_banks
    lda #2
    jsr change_palette

    jsr plot_title

    jsr show_bank2          ; Show bank 2 since this is where the output of OS
                            ; calls will appear.

    jsr print_title_text

    ; Wait for the SPACE key or fire button to be pressed.
    main_start_wait_loop:

        jsr read_joystick_fire

        lda #1
        bcs main_init

        main_start_wait_loop_key_check:

        ldx #157            ; (SPACE)
        jsr check_key
        bne main_start_wait_loop

    lda #0

    main_init:
    clc
    sta using_joystick

    ; Set character's initial position and status.

    lda #19
    sta player_x
    lda #18
    sta player_y
    sta tracking_y      ; Set the vertical tracking position of the character.
    lda #2
    sta player_animation
    lda #0
    sta player_ys
    sta player_jumping
    sta player_moving
    sta player_falling
    sta player_lost
    sta player_lives
    sta check_monster_tile
    sta monster_movement_offset

    ldx #0
    init_lives_loop:

        jsr plot_life
        inc player_lives
        lda player_lives
        cmp #10
        bcc init_lives_loop

    ; Initialise the tile visibility values and erase any collected objects in
    ; the panel.

    ldx #[tile_visibility_length - 1]
    init_tile_visibility_loop:

        lda initial_tile_visibility_address,x
        sta tile_visibility_address,x

        and #$40
        beq init_tile_visibility_next

        clc
        txa
        adc #16
        tay
        jsr erase_collected_object

        init_tile_visibility_next:
        dex
        bpl init_tile_visibility_loop

    ; Determine the left and right monster indices and offsets.

    jsr clear_banks
    lda #2
    jsr change_palette

    jsr init_scrolling

    jsr initial_plot_bank1
    jsr plot_char_bank1

    ; Initialise the monster positions.
    jsr reset_monster_positions
    jsr init_monster_positions

    jsr plot_monsters_bank1 ; Show any initial monsters.

    jsr show_bank1          ; Show the completed bank.
    jsr initial_plot_bank2

    lda #0                  ; Set the initial scroll offset and tracking offset.
    sta scroll_offset_low
    sta tracking_low
    sta scroll_offset_high
    sta tracking_high

    main_loop:

        lda #0
        sta scrolled

        main_loop_check_lost:

        lda player_lost
        beq main_loop_check_jump

            lda #25                     ; Wait for half a second.
            sta $80
            main_loop_lost_loop:
                jsr vsync
                dec $80
                bpl main_loop_lost_loop

            lda player_lives            ; Exit the main loop if there are no
            beq main_loop_endloop       ; lives left.

            jsr clear_banks             ; Clear both banks and show the first.

            jsr jump_to_tracking_offset ; Move to the tracking position.

            lda #0
            sta player_lost
            sta player_ys

            lda tracking_y
            sta player_y

            jsr plot_char           ; Plot the character again.

        main_loop_check_jump:

        lda player_jumping          ; Is the character jumping?
        bne main_loop_allow_movement ; If so then check for input, which might
                                     ; be ignored.
            jsr check_beneath       ; If not, then check below the character.

        main_loop_check_fall:

        lda player_falling          ; Is the character falling?
        beq main_loop_allow_movement    ; No, so allow movement.

            jsr player_fall             ; Yes, so move them downwards.
            bcs main_loop_check_monsters ; If they are moving horizontally then
                                         ; skip past the movement checks.
        main_loop_allow_movement:

            clc                     ; Check for horizontal input. Note that it
            jsr player_move         ; might still be forbidden by the jumping
                                    ; counter or falling flag.

            lda scroll_offset_low
            cmp #finish_scroll_offset_low
            bne main_loop_check_monsters
            lda scroll_offset_high
            cmp #finish_scroll_offset_high
            bne main_loop_check_monsters

            ; Jump to an address in the working area where the completion code
            ; was copied to by the loader.
            jsr game_completed

        main_loop_check_monsters:
        jsr check_player_monsters

        lda scrolled
        bne main_loop_after_monsters

        jsr vsync
        jsr plot_monsters        ; unplot monsters
        jsr move_monsters
        jsr plot_monsters        ; plot monsters

        main_loop_after_monsters:
        main_loop_continue:
        clc

        ldx #200            ; (P)
        jsr check_key
        bne main_loop_no_pause

        lda #201            ; (O)
        jsr wait_for_key

        main_loop_no_pause:

        ldx #174            ; (S)
        jsr check_key
        bne main_loop_check_quiet

        ldx #0              ; Enable sound (X=0).
        jsr disable_sound

        main_loop_check_quiet:

        ldx #239            ; (Q)
        jsr check_key
        bne main_loop_check_escape

        ldx #1              ; Disable sound (X=1).
        jsr disable_sound

        main_loop_check_escape:
        ldx #143            ; (Escape)
        jsr check_key
        beq main_loop_endloop
        jmp main_loop

    main_loop_endloop:

    ; Do something to indicate the game is over.

    jsr clear_banks
    jsr show_bank2          ; Show bank 2 since this is where the output of OS
                            ; calls will appear.

    jsr print_game_over_text

    lda #157        ; (SPACE)
    jsr wait_for_key

    jmp main

player_move:

    lda player_jumping
    beq player_move_check_fall

    ; Whether moving or not, the player needs to be replotted before any
    ; scrolling occurs because the scrolling routine will replot the player.

    jsr vsync

    jsr plot_player                 ; unplot
    jsr player_jump
    jsr plot_player                 ; plot

    lda player_moving
    cmp #1
    bne player_move_not_moving_left

    jmp player_move_left            ; jsr then rts

    player_move_not_moving_left:
    cmp #2
    bne player_move_exit

    jmp player_move_right           ; jsr then rts

    player_move_check_fall:

    lda player_falling
    beq player_move_check_input

    player_move_exit:
    rts

    player_move_check_input:

    lda #0                          ; Reset the movement flag.
    sta player_moving

    lda using_joystick
    beq player_move_check_keys

    ldx #1
    jsr read_joystick_axis
    bcc player_move_check_joystick_vertical

    cmp #1
    beq player_move_checked_left
    bne player_move_checked_right

    player_move_check_joystick_vertical:

    ldx #2
    jsr read_joystick_axis
    bcc player_move_check_jump

    cmp #1
    beq player_move_checked_jump
    jmp player_enter

    player_move_check_keys:

    ldx #158        ; (Z)
    jsr check_key
    bne player_move_not_left

    player_move_checked_left:

    jsr player_move_left   ; allow the player to jump while moving
    jmp player_move_check_jump

    player_move_not_left:

    ldx #189        ; (X)
    jsr check_key
    bne player_move_not_right
    clc

    player_move_checked_right:

    jsr player_move_right   ; allow the player to jump while moving

    ; jmp player_move_check_jump (fall through)

    player_move_not_right:

    player_move_check_jump:

    lda player_jumping
    bne player_move_not_jump

    lda using_joystick
    beq player_move_check_jump_key
    
    jsr read_joystick_fire
    bcc player_move_exit
    bcs player_move_checked_jump

    player_move_check_jump_key:

    ldx #182        ; (Return)
    jsr check_key
    bne player_move_not_jump
    clc

    player_move_checked_jump:

    jsr player_can_jump
    bcs player_move_not_jump

    ldx #2                          ; jump sound
    jsr play_sound

    jsr plot_player                 ; unplot

    jsr player_jump_animation
    jsr player_jump

    jmp plot_player                 ; plot then exit

    player_move_not_jump:

    ldx #151        ; (/)
    jsr check_key
    bne player_move_exit

    jmp player_enter                ; Branch then exit.

check_beneath:      ; Checks beneath the character for solid tiles.
                    ; Sets player_falling if none exist.
    lda player_ys
    bne check_beneath_fall
    
    lda player_y
    cmp #bottom_char_row            ; The last visible row is 22 and the top of
    bcs check_beneath_demise_exit   ; the character is two rows above that.

    adc #3
    sta $81
    lda player_x
    sta $80

    jsr check_tile
    bcs check_beneath_solid

    inc $80
    jsr check_tile
    bcs check_beneath_solid

    lda bank_number         ; When half way across a cell, check another cell
    beq check_beneath_fall  ; beneath the player since they could be standing
                            ; on one or more of three tiles.
    clc
    inc $80
    jsr check_tile
    bcs check_beneath_solid

    check_beneath_fall:

    lda player_falling
    bne check_beneath_fall_exit

    lda #1                      ; (Clears the Z flag.)
    bne check_beneath_fall_exit

    check_beneath_demise_exit:

    jmp player_demise       ; Decrease the number of lives and exit.

    check_beneath_solid:    ; A solid tile was found.

    lda player_falling          ; If the character is not falling then exit.
    beq check_beneath_fall_exit

    ldx #3                      ; Play the step sound.
    jsr play_sound

    lda #0                      ; Reset the falling flag.

    check_beneath_fall_exit:
    sta player_falling
    clc
    rts

read_row_address:           ; X=row number
                            ; Returns $76,$77 (row address)

    lda row_table_low,x     ; Load entry A from the table.
    sta $76
    lda row_table_high,x
    sta $77

    lda row_indices,x   ; Load index i from the indices;
    asl                 ; and multiply it by 2 to get i*2.
    adc $76             ; Add i*2 to A to get the address, I, of the
    sta $76             ; starting offset and type.
    lda $77
    adc #0
    sta $77
    clc

    rts

check_tile:         ; $80=x position (-16 to 56) (-16 is represented as 240)
                    ; $81=y position (0-22) (measured from the top of the
                    ;           playing area, not the top row of the scenery)
                    ; $8a=0 (player's character) or $8a=1 (monsters)
                    ; returns C set if tile found or C clear if not

    lda $81         ; For y positions less than 7 do not check the corresponding
    cmp #extra_rows ; row since there are no level spans in these rows.
    bcc check_tile_exit

    sbc #extra_rows
    clc

    tax                       ; Transfer the y coordinate to the X register.
    jsr read_row_address      ; Set $76,$77 with the address of the first span
                              ; in the row.

    lda initial_row_offsets,x ; Store the number of tiles that are shown on
    sta $74                   ; screen in the current span.

    lda $80                   ; if x >= 128 (-128 <= x < 0)
    cmp #128                  ; then traverse the span, increasing the x value
    bcc check_tile_positive   ; until it is positive.

    ;                   Screen edge
    ;                        |
    ;              |<-  D  ->|<- row offset ->|
    ; - - ---------|--------------------------|---------|--- - - Spans
    ;              |<-    max row offset    ->|
    ;              |<-d->|
    ;              |     ^
    ;                 negative x position

    ; Subtract the row offset from the maximum row offset to find D, the
    ; distance from the start of the previous span to the edge of the screen.
    ; Add the negative x coordinate to D to find d, the offset into the span.
    ; If this value is positive then we have found the span to use. If still
    ; negative then decrement the span address and read the span before the
    ; previous span, and so on.
    
                                ; The carry flag is already set.
    sbc $74                     ; Subtract the initial row offset from x.
    sta $74                     ; Record the result.
                                ; Leave the carry flag set.

    check_tile_negative_loop:

        lda $76                 ; Refer to the previous span, p'.
                                ; The carry flag is already set.
        sbc #2
        sta $76
        lda $77
        sbc #0
        sta $77
        clc

        ldy #1                  ; Load the number of tiles in span p'.
        lda ($76),y             ; (n - 1).
        adc #1                  ; Add span length (max row offset) to find d.
        adc $74                 ; Add the current offset from the span end.

        cmp #128
        bcc check_tile_negative_loop_exit
        sta $74
        bcs check_tile_negative_loop

        check_tile_negative_loop_exit:

        ldy #0
        lda ($76),y             ; Load the tile type for span p'.
        jmp check_tile_visible

    check_tile_positive:

    lda $74
    cmp $80                   ; If less than the x coordinate then start
    beq check_tile_spans_loop ; examining spans until we find one to the right
    bcc check_tile_spans_loop ; of the x coordinate.

    lda initial_row_tiles,x
    jmp check_tile_visible  ; Check whether the tile is visible and return.

    check_tile_spans_loop:

        clc
        ldy #1
        lda ($76),y         ; Load the number of tiles minus 1, n - 1.
        adc #1              ; n
        bcs check_tile_spans_loop_found
        adc $74             ; Add to the row offset
        bcs check_tile_spans_loop_found

        cmp $80                         ; If the span position is less than or
        beq check_tile_spans_loop_next  ; equal to the x coordinate then loop
        bcc check_tile_spans_loop_next  ; again.

        check_tile_spans_loop_found:

        ldy #0
        lda ($76),y             ; Load the type number, t,
        jmp check_tile_visible  ; Check whether the tile is visible and return,
                                ; the type number in A, leaving $76,$77
                                ; pointing to the span that was found.

        check_tile_spans_loop_next:

        sta $74             ; Store the new span offset.

        cmp #60
        bpl check_tile_spans_endloop

        lda $76             ; Increment the row address.
        adc #2
        sta $76
        lda $77
        adc #0
        sta $77

        jmp check_tile_spans_loop

    check_tile_spans_endloop:
    check_tile_common_clear_exit:
    clc                         ; In theory, we should never reach here.

    check_tile_exit:
    rts

; Special tiles have numbers greater or equal to 16 (0x10). The top four bits
; are used to represent properties of each tile: vcdt nnnn.
; v = visible (initial visibility of the tile)
; c = collectable item
; d = door that can be opened with a corresponding key - two consecutive tile
;     numbers are used for the door and key tiles
; t = treasure - a pair of adjacent tiles is used to represent this in the
;     level, and the tile numbers used differ only by the lowest bit

check_tile_visible:             ; A=tile number
                                ; returns C set if tile is visible or C
                                ; clear if not
    cmp #$10
    bcs check_tile_visible_special

    cmp #1                      ; Return C set for tiles 1-15; C clear for 0
    rts

    check_tile_visible_special:

    cmp #$50
    bcs check_tile_common_clear_exit    ; Portals (> 128) are not visible.

    check_tile_visible_not_portal:

    tay                         ; transfer the tile number to Y
    lda ($82),y                 ; load the visibility of the tile
    cmp #$80
    bcc check_tile_exit         ; Not visible, and C is clear to indicate this.

    check_tile_visible_next:    ; the tile is visible
    ldx $8a
    cpx #0
    bne check_tile_visible_exit ; exit with C set for monsters
                                ; continue for the player's character, in order
                                ; to collect objects or open doors

    and #$7f                    ; mask off the visible bit
    cmp #$40                    ; check for collectable objects (vCdtnnnn)
    bcs check_tile_collect_visible_object

    ; Non-collectable (scenery) objects

    and #$3f                    ; mask off visible and collectable bits
    cmp #$20                    ; check for doors that can be opened with a key
                                ; (vcDtnnnn)
    bcc check_tile_visible_exit ; any other visible scenery objects cannot be
                                ; walked through (000tnnnn)

    ; For doors, check the visibility of the corresponding key special tile.
    clc
    sty $8c                     ; temporarily store the special tile number
    tya                         ; a special scenery tile (00Dtnnnn)
    eor #$01                    ; check the corresponding collectable tile
    tay                         ; (00DtnnnN)
    lda ($82),y
    bne check_tile_visible_exit ; if visible (i.e. not collected) then exit

    ldx #4                      ; door sound
    jsr play_sound

    ldy $8c                     ; restore the special tile number (00Dtnnnn)
    jmp make_tile_invisible     ; make all tiles of that type invisible and exit

check_tile_collect_visible_object:

    and #$1f                ; mask off the visible, collectable and door bits
    cmp #$10                        ; check for treasure (vcdTnnnn)
    bcs check_tile_collect_treasure ; remove both parts of the object 
    bcc check_tile_collect_object   ; not treasure, just a regular object

check_tile_collect_treasure:

    clc

    jsr plot_collected_object       ; show the item of treasure in the header
    jsr make_tile_invisible         ; make all tiles of this type invisible

    tya
    eor #1                          ; do the same for the corresponding tile
    tay

    check_tile_collect_object:

    jsr plot_collected_object       ; show the item of treasure in the header
    jsr make_tile_invisible         ; make all tiles of this type invisible

    ldx #1                          ; item sound
    jmp play_sound

check_tile_visible_exit:

    sec
    rts

make_tile_invisible:    ; Y=special tile number

    lda #0
    sta ($82),y         ; make the tile invisible
    clc
    rts

check_move_right:

    lda bank_number
    cmp #1                      ; If bank 2 is showing, we can move right
    beq player_move_common_exit ; without checking.

    lda player_x
    adc #2
    sta $80
    lda player_y
    sta $81
    clc

    bcc check_move  ; branch then exit

player_move_right:

    jsr check_move_right
    bcs player_move_right_cannot_move

    lda #2                      ; 2=moving right
    sta player_moving

    jmp scroll_right_update     ; branch then exit

    player_move_right_cannot_move:

    lda #0                      ; stop the player's motion
    sta player_moving

player_move_common_exit:
    clc             
    rts

check_move_left:

    lda bank_number
    cmp #1                      ; If bank 2 is showing, we can move left
    beq player_move_common_exit ; without checking.

    lda player_x
    sec
    sbc #1
    sta $80
    clc
    lda player_y
    sta $81

    ; fall through into the next routine

check_move:

    lda #2          ; Start with an offset of 2 from the player's row number.
    sta $7c

    lda #0          ; Use a byte to record occupied tiles. Since we start at
    sta $7d         ; the player's top row, the order of bits is 0000tmb[f] for
                    ; top, middle, bottom and an optional falling bit.
    lda player_falling
    beq check_move_loop

    inc $7c         ; If the player is falling then we need to check an
                    ; additional tile, below and to the left/right.

    check_move_loop:

        asl $7d
        clc
        jsr check_tile
        bcc check_move_next
        clc

        lda $7d     ; Set a bit to indicate that this tile is occupied.
        ora #1
        sta $7d

        check_move_next:

        inc $81
        dec $7c
        bpl check_move_loop

    lda $7d                 ; If all tiles are empty then allow the move.
    beq player_move_common_exit

    lda player_falling      ; If some tiles are not empty while falling then
    bne check_move_exit_not_ok

    lda player_jumping      ; If some tiles are not empty while jumping then
    bne check_move_exit_not_ok

    lda $7d                 ; If more than the lowest tile is blocked then
    cmp #$01                ; stop moving.
    bne check_move_exit_not_ok

    jsr plot_player         ; Move the player up by one tile.
    dec player_y            ; We should really check to make sure that there
    jmp plot_player         ; is space above the player to do this.
                            ; Branch and return.

    check_move_exit_not_ok:
    sec
    rts

player_move_left:

    jsr check_move_left
    bcs player_move_left_cannot_move

    lda #1                      ; 1=moving left
    sta player_moving

    jmp scroll_left_update      ; branch then exit

    player_move_left_cannot_move:

    lda #0                      ; stop the player's motion
    sta player_moving
    clc
    rts

; Define the vertical steps and half steps for each part of a jump.
jump_steps_y:    .byte 0,1,1,1,1,0,0,0,0
jump_offsets_ys: .byte 0,0,0,0,1,0,0,0,0

player_jump:

    ldx player_jumping      ; Load the number of rows to move.
    lda jump_steps_y,x

    beq player_jump_check_after     ; If there are no rows to move then stop
                                    ; jumping.

    jsr player_can_jump
    bcs player_jump_stop_jumping

    lda $81                         ; The character can move up, so update the
    sta player_y                    ; position with the temporary y coordinate.

    player_jump_check_after:
    clc

    ldx player_jumping              ; Load the number of rows to move.
    lda jump_offsets_ys,x
    sta player_ys

    inx
    cpx #9                          ; After the end of the list of offsets,
    bcs player_jump_stop_jumping    ; stop jumping.

    stx player_jumping
    rts

    player_jump_stop_jumping:

    jsr player_jump_animation

    lda #0
    sta player_jumping
    sta player_ys

    jmp check_beneath

player_can_jump:

    lda player_y
    sta $81

    dec $81

    lda player_x
    sta $80
    jsr check_tile
    bcs player_can_jump_stop_jumping

    inc $80

    jsr check_tile
    bcs player_can_jump_stop_jumping

    lda bank_number             ; When half way across a cell, check another
    beq player_can_jump_exit    ; cell above the player since they could be
                                ; under one or more of three tiles.
    inc $80

    jmp check_tile              ; Branch and exit.

    player_can_jump_exit:

    player_can_jump_stop_jumping:
    rts                         ; The carry flag should already be set.

player_jump_animation:

    lda player_animation
    eor #1
    sta player_animation
    rts

player_enter:

    clc
    lda player_y
    adc #2
    sta $81
    lda player_x
    sta $80
    jsr check_tile

    cmp #$80
    bcs player_enter_find_portal
    
    rts

    player_enter_find_portal:
    clc

    sta $74                         ; Record the value for later use.

    and #$0f                        ; Obtain the portal number from the lowest
    sta $80                         ; 4 bits and multiply it by 3 to obtain an
    asl                             ; offset into the portal table.
    adc $80
    tax

    lda portal_table_address,x      ; low x
    sta tracking_low
    inx
    lda portal_table_address,x      ; high x
    sta tracking_high
    inx
    lda portal_table_address,x      ; y + 7 blank rows at the top - 2 from the
    adc #5                          ; foot to the head = 5
    sta player_y
    sta tracking_y

    jsr clear_banks                 ; Clear both banks and show the first.

    lda $74
    and #$70
    lsr
    lsr
    lsr
    lsr
    jsr change_palette              ; Change the palette using the value stored
                                    ; in $70.

    ldx #5
    jsr play_sound                  ; Play the portal sound.

                                    ; Fall through to the following routine.

jump_to_tracking_offset:

    lda scroll_offset_high
    cmp tracking_high
    beq jump_to_tracking_offset_low_check
    bcs jump_to_tracking_offset_left
    bcc jump_to_tracking_offset_right

    jump_to_tracking_offset_low_check:

    lda scroll_offset_low
    cmp tracking_low
    beq jump_to_tracking_offset_exit
    bcc jump_to_tracking_offset_right

    jump_to_tracking_offset_left:
    
    dec scroll_offset_low
    lda scroll_offset_low
    cmp #$ff
    bne jump_to_tracking_offset_left_next
    dec scroll_offset_high
    jump_to_tracking_offset_left_next:
    clc

    jsr scroll_left_update_monsters
    jsr scroll_left
    bcc jump_to_tracking_offset         ; C should be clear.

    jump_to_tracking_offset_right:

    inc scroll_offset_low
    lda scroll_offset_low
    cmp #0
    bne jump_to_tracking_offset_right_next
    inc scroll_offset_high
    jump_to_tracking_offset_right_next:
    clc

    jsr scroll_right_update_monsters
    jsr scroll_right
    bcc jump_to_tracking_offset         ; C should be clear.

    jump_to_tracking_offset_exit:

    jsr reset_monster_positions

    jsr initial_plot_bank1
    jsr init_monster_positions
    jsr plot_monsters_bank1         ; Show any initial monsters.
    jsr initial_plot_bank2

    jmp plot_player                 ; plot the player and exit

fall_steps_y:    .byte 0,0,1,1
fall_offsets_ys: .byte 0,1,0,0

player_fall:        ; sets C if the player is moving horizontally

    lda player_moving
    cmp #1
    bne player_fall_not_moving_left

    jsr player_move_left
    sec
    rts

    player_fall_not_moving_left:

    cmp #2
    bne player_fall_not_moving_right

    jsr player_move_right
    sec
    rts

    player_fall_not_moving_right:

    ; When not moving horizontally, the player character must be unplotted and
    ; replotted because redrawing because scrolling does not occur.

    lda scrolled
    bne player_fall_plot

    jsr vsync

    player_fall_plot:
    jsr plot_player
    jsr player_drop
    jmp plot_player         ; Branch and exit.

player_drop:

    clc
    ldx player_falling
    lda fall_steps_y,x
    adc player_y
    sta player_y

    lda fall_offsets_ys,x
    sta player_ys

    cpx #3                  ; Do not increment the falling counter beyond the
    beq player_drop_exit    ; last falling offset.

    inx
    stx player_falling

    player_drop_exit:
    clc
    rts

player_demise:

    lda player_lost         ; Don't allow the routine to be entered if it has
    bne player_demise_exit  ; just been called.

    lda #1
    sta player_lost
    tax                 ; X=1

    dec player_lives
    lda player_lives
    jsr plot_life

    lda #0
    sta player_jumping
    sta player_falling

    ldx #0                          ; demise sound
    jsr play_sound

    player_demise_exit:
    sec
    rts

.include "screen.oph"
.include "plotting.oph"
.include "scrolling.oph"
.include "bank_routines.oph"
.include "monsters.oph"
.include "sound.oph"
.include "ending.oph"
