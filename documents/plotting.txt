Tile size for plotting: 8 x 8
Step size for scrolling: 4 pixels

### ###
# ### ##

Two banks, one is one scroll step ahead of the other. Each bank scrolls by two
scroll steps.

1: .... ....  .... ....
2: .... ....  .... ++++

1: .... ....  ++++ ++++ (two cells to update)
2: .... ++++  ++++ ++++ (two cells to update)

1: ++++ ++++  ++++ ++++ (two cells to update)
2: ++++ ++++  ++++ .... (two cells to update - one off to the left)

We only plot the edges between tiles, so the bank swapping has to produce the
effect of scrolling spans of tiles. If we only used one bank, the tiles would
have to be uniform in colour to avoid giving the effect that spans of tiles are
static.

In principle, other scroll steps could be used.

Tile size for plotting: 8 x 8
Step size for scrolling: 2 pixels

1: .... ....
2: .... ..++

1: .... ++++ (one cell to update)
2: ..++ ++++ (two cells to update)

1: ++++ ++++ (one cell to update)
2: ++++ ++.. (two cells to update - one off to the left)

Smoother scrolling means fewer cells to update for bank 1.

Tile size for plotting: 8 x 8
Step size for scrolling: 1 pixel

1: ....
2: ...+

1: ..++
2: .+++

1: ++++
2: +++.

If there is no need to write to a cell to "finalise" it as part of a span, as
there is in games like Moon Raider that use EOR to paint the tile that makes up
a hill until it becomes a solid block of colour, then each cell only needs to
be updated once in each bank.

However, since there are only two banks, the pattern used must be repeated for
twice the number of pixels in each scroll step, so a single pixel scroll
results in tiles with 2 pixel wide patterns, typically resulting in 2 x 2 sized
patterns.

We will use a scroll step size of 2 pixels to allow for repeating patterns 4
pixels wide.

1: .... ....
2: .... ..++

1: .... ++++ (one cell to update)
2: ..++ ++++ (two cells to update)

1: ++++ ++++ (one cell to update)
2: ++++ ++.. (two cells to update - one off to the left)

On bank 1 we plot the cells that change when the screen scrolls by two steps:

1: .... ++++ ++++ ####
1: ++++ ++++ #### ####
   ^^^^      ^^^^

On bank 2 we plot the cells that show the interfaces between tiles of different
types, and plot the cells that change when the screen scrolls by two steps:

2: .... ..++ ++++ ++##
2: ..++ ++++ ++## ####
   ^^^^ ^^^^ ^^^^ ^^^^

Since twice the number of cells will need to be updated on bank 2, we should
perform other tasks when we redraw bank 1.

Initial plot:

All the tiles are plotted in bank 1 for the starting point in the level. In
bank 2, all the scrolled tiles are plotted in preparation for scrolling.

Level format:

It would be wasteful to store a 2D array of tile numbers, especially since we
are only interested in knowing where spans of tiles begin and end.

We record an offset into the level. For each row of tiles, we record which
offset into the tile data we must begin from.

  ####......#####...    0,# 4,. 10,# 15,.
  ^ ^ ^  ^ ^  ^  ^
  0 0 1  1 1  2  3

For bank 1, we read the offset from the tile data and plot a tile if the offset
equals the level offset. We then read the next offset in the tile data and plot
the appropriate tile if it is on-screen.

For bank 2, we plot tile interfaces when the tile offset is one greater than
the level offset when scrolling right.

Since each tile is quite small (4 pixels), and a level format that uses one
byte for the tile offset is restricted to a width of less than 256 tiles (about
five MODE 5 screens wide), we might want to consider making each tile span at
least two cells wide. This extends the potential level width and simplifies the
algorithm to plot changes in bank 2:

2: .... ..++ ++## ####
2: ..++ ++## #### ####
        ^^^^
        Must look ahead to decide if this cell could be ++++ or another
        interface between tile types.

Instead, we now have:

2: .... ..++ ++++ ++##
2: ..++ ++++ ++## ####
        ^^^^
        Can guarantee that the cell following a tile change is always a single
        tile type.

With spans of two cells, we can potentially fake single cell tiles by using
tile interfaces as regular tiles in bank 1 and different tile interfaces in
bank 2.

1: .... ++## ....
2: ..++ ##.. ....

However, the data required to store this information might be excessive.

Indexing the rows:

We need to access each row of spans in turn to be able to update them. To do
this, we create a look-up table that refers to each row of data and store a
list of indices into the row to keep track of where in the row we are
displaying. Dereferencing the pointers in the table, we can then add the index
to find the current starting element for each row.

Left scroll offset: x
Right scroll offset: x + 40

Table:   a0, a1, a2, ...
Indices: i0, i1, i2, ...
Initial row offsets: o0, o1, o2, ...

Data:    (type,number), (type,number), (type,number), ...
         (type,number), ...
         (type,number), (type,number), ...
         ...

To plot each row:

    Load the table entry, a, and multiply it by 2 to get a*2.
    Add a*2 to the data start address to get the row start address, A.
    
    Load index i from the indices and multiply it by 2 to get i*2.
    Add i*2 to A to get the address, I, of the starting offset and type.
    
    Load the initial row offset for the row, o.
    
    Loop:
    
        If o >= 40, break.
        Multiply o by 8, and add to R to get x.
        
        For bank 1:
            Load the type number, t, mask off the top 4 bits and multiply by 8
            to get t1.
            Add t1 to the sprite area address S to get S1.
            
            Plot S1 at x.
        
        For bank 2:
            Load the type number, t, masking off the bottom 4 bits, and
            divide by 2 to get t2.
            If 
            Subtract 
            Add t2 to the merged sprite area address S to get S2.
            
            Plot S2 at x.
        
        Load the number of tiles minus 1 from I+1, n.
        
        For bank 2:
            If n is greater than 0:
                Load the type number, t, mask off the top 4 bits and multiply
                by 8 to get t1.
                Add t1 to the rotated sprite area address S to get S3.
                Add 8 to x.
                
                Plot S3 at x.
        
        Add n + 1 to o.
        Add 2 to I.
        Iterate again.

Scrolling:

To scroll right, for each row:

    If the initial row offset is non-zero, decrease it by 1.
    Otherwise, load the number of tiles (minus 1) in the span for the current
    span and store that as the new initial row offset.
    Add 1 to the index for the row.


Scrolling left:

  <~>       offset >= 2 (leading span, merged tile then first span)
  ~>        offset = 1 (no leading span, just the merged tile)
  >         offset = 0 (no leading span)

 <~>>>>-


Level Format
------------

16 rows of spans, each defined as

    (type,number), ...

Each type is a tile number (0-255) where the top 4 bits are used to indicate
whether the tile is visible or not.

The bottom four bits are the tile number.
If the top 4 bits are 0 then the tile is always shown.

    0000tttt -> tile number

If the top 4 bits are non-zero then the byte is an offset into a tile
visibility table and a tile number table. The base address for each table
is chosen appropriately so that we avoid having to subtract 16 from the
offset.

    xxxxxxxx -> offset into visibility and tile number tables

    tile_visibility_table:
    [16 bytes]
    tile_visibility_table_start:
    [values]

    tile_number_table:
    [16 bytes]
    tile_number_table_start:
    [values]

The offsets into the level data for each row are two-byte addresses, so the
data for each row can start anywhere in memory. However, the total number of
spans in each row is limited by the row indices which are one byte each. Since
each span can represent at most 256 tiles, the maximum possible level width is
256 * 256 tiles. The screen is 40 tiles wide, so a level of 65536 tiles is
1638.4 screens wide.

In the initial memory map for the game, there is about 2560 bytes to use for
the row spans, which gives an average of 160 bytes per row, or 80 spans. This
would still yield a possible 20480 tiles or 512 screens.


Enemies
-------

Enemy table is 16 bytes.

    t_dx0 x0 y0 dy0 t_dx1 x1 y1 dy1 ... t_dx15 x15 y15 dy15

Type numbers take the form

    000nnxae

where

    e is the existence bit
    a is the animation bit
    x corresponds to dx (0 or 1)
    nn is the sprite number
