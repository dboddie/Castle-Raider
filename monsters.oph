; Copyright (C) 2013 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

; Each monster type is defined as yyyyynnd.
.alias monster_data_axis_bit            $01
.alias monster_data_type_bits           $06

; Each monster visible type is defined as nnxa.
.alias monster_animation_bit            $01
.alias monster_dx_bit                   $02
.alias monster_type_bits                $0c
.alias monster_plot_bits                $0f
.alias monster_direction_bit            $20
.alias monster_axis_bit                 $40
.alias monster_existence_bit            $80

.alias monster_horizontal_motion        $00
.alias monster_vertical_motion          $40

reset_monster_positions:            ; Clears the table of on-screen monsters.

    ldx #$13
    lda #0

    reset_monster_positions_loop:
        sta monster_positions_address,x
        dex
        bpl reset_monster_positions_loop

    clc
    rts

init_monster_positions:

    lda monster_left_index          ; Load the index into the monster spans
                                    ; for the left screen edge.
    sta $7b

    lda #0                          ; Keep track of the screen column number
    adc monster_left_offset         ; (initially -2, but count from 0), adding
    clc                             ; the current offset to the default value
    sta $7d                         ; to find the location of the first visible
                                    ; span.

    bcc init_monster_positions_create   ; Jump into the loop to skip the span
                                        ; length addition.

    init_monster_positions_loop:

        lda $7b                         ; Load the monster index.
        jsr read_monster_row_address    ; Examine the monster data at this index.
                                        ; Sets $76,$77.

        inc $7b                         ; Examine the next monster index.

        ldy #1                          ; Examine the span information.
        lda ($76),y                     ; Load the span length (n - 1).
        cmp #43                         ; If this alone exceeds the screen
        bcs init_monster_positions_exit ; width then exit (including some
                                        ; extra columns to allow for the
                                        ; implicit addition of 2 columns).

        adc $7d                         ; Calculate the next monster position.
        adc #1

    init_monster_positions_create:

        cmp #1
        bcc init_monster_positions_loop
        cmp #43                         ; Continue until we reach the right
        bcs init_monster_positions_exit ; edge of the screen (including some
                                        ; extra columns to allow for the
                                        ; implicit addition of 2 columns).

        sta $7d                         ; Store the new monster position.

        and #$20                        ; Retain the direction bit (1=right)
        sta $8d
        lda $7b                         ; Load the monster index
        jsr create_initial_monster

        ;bcs init_monster_positions_exit ; If no monster was created then exit.
        jmp init_monster_positions_loop ; Otherwise loop again.

    init_monster_positions_exit:
    clc
    rts

; Monster plotting routines (nnxa)

monster_sprite_low: .byte monster_spr_low0,     monster_spr_low1
                    .byte monster_spr_sh_low0,  monster_spr_sh_low1
                    .byte monster_spr_low2,     monster_spr_low3
                    .byte monster_spr_sh_low2,  monster_spr_sh_low3
monster_sprite_high:.byte monster_spr_high0,    monster_spr_high1
                    .byte monster_spr_sh_high0, monster_spr_sh_high1
                    .byte monster_spr_high2,    monster_spr_high3
                    .byte monster_spr_sh_high2, monster_spr_sh_high3

plot8x8_lengths: .byte 15, 23

read_monster_row_address:   ; A=index
                            ; Returns $76,77 (monster row span address)
    clc
    asl                         ; index*2
    adc #<monster_row_address
    sta $76
    lda #>monster_row_address
    adc #0
    sta $77
    clc

    rts

plot_monsters:

    lda bank_number
    bne plot_monsters_bank2
    beq plot_monsters_bank1

plot_monsters_bank1:            ; Entry point for plotting monsters on bank 1.

    jsr set_monsters_bank1
    jmp plot_monsters_pre_loop

plot_monsters_bank2:            ; Entry point for plotting monsters on bank 2.

    jsr set_monsters_bank2
    jmp plot_monsters_pre_loop

set_monsters_bank1:             ; General routine for setting the monster
                                ; plotting routine. Could be moved into
    lda #<plot_monster_bank1    ; plot_monsters_bank1 later.
    sta $7a
    lda #>plot_monster_bank1
    sta $7b
    rts

set_monsters_bank2:             ; General routine for setting the monster
                                ; plotting routine. Could be moved into
    lda #<plot_monster_bank2    ; plot_monsters_bank2 later.
    sta $7a
    lda #>plot_monster_bank2
    sta $7b
    rts

plot_monsters_pre_loop:

    lda #0

    plot_monsters_loop:

        sta $88                     ; store the offset temporarily

        tay
        lda ($86),y                 ; type, animation and dx
        beq plot_monsters_loop_next

        jsr plot_monster

        plot_monsters_loop_next:
        clc

        lda $88
        adc #5
        cmp #$14
        bne plot_monsters_loop

    plot_monsters_exit:
    clc
    rts

plot_monster:   ; $7a,$7b=sprite plotting routing for a given bank
                ; (set up in set_monsters_bank1 or set_monsters_bank2)
                ; A=monster type
                ; Y=offset into monster table (0, 5, 10, 15)

    ; Determine the sprite to use from the type and dx value, converting the
    ; value to an offset into the sprite address arrays.
    and #monster_plot_bits      ; Mask off the non-sprite-related bits.
    tax
    and #monster_dx_bit
    lsr
    sta $8c                     ; dx=0 or 1

    lda monster_sprite_low,x    ; load the sprite address
    sta $70
    lda monster_sprite_high,x
    sta $71

    ldx $8c                 ; Use the dx value to look up the length of data
    lda plot8x8_lengths,x   ; to plot for the sprite.
    sta $8d
    lda #0                  ; Plot from the beginning of the sprite data.
    sta $8c

    iny
    lda ($86),y                 ; x offset
    sta $8b                     ; Store the x offset.

    cmp #254                    ; Check for x >= 254 (-2 >= x > 0).
    bcc plot_monster_not_left

    cmp #255
    beq plot_monster_x_minus_one

        lda #0                  ; Only plot from the left hand edge.
        sta $8b

        lda #16
        sta $8c
        cmp $8d                 ; If the start offset is greater than the
        bcs plot_monsters_exit  ; finish offset then exit.
        bcc plot_monster_plot

    plot_monster_x_minus_one:

        lda #0                  ; Only plot from the left hand edge.
        sta $8b

        lda #8                  ; (Clears the Z flag.)
        sta $8c
        bne plot_monster_plot

    plot_monster_not_left:

    cmp #38
    bcc plot_monster_plot       ; If x < 38 then just plot everything.
    beq plot_monster_x_plus_one

    cmp #40
    bcc plot_monster_x_plus_two
    bcs plot_monsters_exit      ; If x >= 40 then exit.

    plot_monster_x_plus_one:    ; x = 38

        lda #15                 ; (Clears the Z flag.)
        sta $8d
        bne plot_monster_plot

    plot_monster_x_plus_two:    ; x = 39

        lda #7
        sta $8d

    plot_monster_plot:

    lda $8b                     ; Retrieve the x offset.
    asl
    asl
    asl                         ; x position
    sta $72
    lda #0
    adc #0
    sta $73
    clc

    iny
    lda ($86),y                 ; y offset
    tax

    jmp ($7a)
    ; The plotting routine returns to the caller of this routine.

; Monster creation/destruction and movement.

create_initial_monster:             ; A=index

    jsr create_monster
    bcs create_monster_common_exit

    lda $7d                         ; Subtract 2 from the x coordinate to obtain
    sec                             ; a screen column number.
    sbc #2
    clc
    bcc create_monster_store_x_pos

create_monster_left:

    lda #$20                        ; direction bit (1=right)
    sta $8d
    lda monster_left_index
    jsr create_monster
    bcs create_monster_common_exit

    lda #254                        ; (Clears the Z flag.)
    bne create_monster_store_x_pos

create_monster_right:

    lda #$00                        ; direction bit (0=left)
    sta $8d
    lda monster_right_index
    jsr create_monster
    bcs create_monster_common_exit

    lda #40
    create_monster_store_x_pos:
    dex
    dex
    dex
    sta monster_positions_address,x ; Store the x coordinate.

    create_monster_common_exit:
    rts

create_monster:                     ; A=index
                                    ; $8d=byte containing direction bit

    sta $88                         ; Temporarily store the monster index.

    jsr read_monster_row_address
    ldy #0
    lda ($76),y                     ; Read the monster type.
    beq create_monster_no_monster   ; If no monster is defined then exit;
                                    ; otherwise create the monster.

    tay                             ; Temporarily store the type.

    lda #255                        ; Store a placeholder value in the free
    sta $7c                         ; slot variable.

    ldx #0
    create_monster_index_loop:

        lda monster_positions_address,x ; Look for an empty slot.
        bne create_monster_index_loop_not_empty

        stx $7c                         ; Temporarily store any unused slots.
        clc
        txa
        adc #4                          ; Seek to the index field.
        tax

        bcc create_monster_index_loop_next

        create_monster_index_loop_not_empty:
        clc
        txa
        adc #4                          ; Seek to the index field.
        tax

        lda monster_positions_address,x ; Compare the index to the one in each
        cmp $88                         ; slot.
        beq create_monster_already_exists

        create_monster_index_loop_next:
        inx
        cpx #$14
        bne create_monster_index_loop

    lda $7c
    cmp #255                        ; If there was no free slot then exit.
    bne create_monster_create

    create_monster_no_free_slot:
    create_monster_no_monster:
    create_monster_already_exists:
    sec
    rts

    create_monster_create:

    lda bank_number
    eor #$01
    asl                             ; 00xa (dx = !bank; a = 0)
    sta $8c

    tya                             ; Recover the type.
    and #monster_data_type_bits     ; Extract the monster type number (00000nn0).
    asl                             ; 0000nn00
    ora $8c                         ; 0000nnxa (from above)
    ora #monster_existence_bit      ; Set the existence bit.
    ora $8d                         ; Combine with the direction bit.
    sta $8c

    tya                             ; Recover the type.
    and #monster_data_axis_bit
    beq create_monster_store_type

    lda #$40                        ; Set the axis bit (vertical motion).

    create_monster_store_type:

    ldx $7c                         ; Recover the type index.
    ora $8c                         ; Combine the axis with the rest of the byte.
    sta monster_positions_address,x

    tya                             ; Recover the original type value.
    and #$f8
    lsr
    lsr
    lsr

    inx
    inx
    sta monster_positions_address,x ; Store the y coordinate.
    inx
    lda #0
    sta monster_positions_address,x ; Store the dy coordinate.

    inx                             ; Reference the index field.
    lda $88                         ; Recover the monster index.
    sta monster_positions_address,x ; Store the index in the index field.

    clc
    rts

move_monsters:

move_monster:                   ; Move just one monster, if present.

    ldy monster_movement_offset

    lda ($86),y                 ; Load the type, animation flag and dx.
    beq move_monsters_next      ; If the slot is empty then this is zero,
                                ; so we move to the next monster and exit.

    eor #monster_animation_bit  ; Flip the animation bit.
    sta $8b                     ; Temporarily store the type/dx byte.

    iny                         ; Select the x offset.
    and #monster_axis_bit
    cmp #monster_vertical_motion
    bne move_monsters_horizontally

        jsr move_monster_vertically
        jmp move_monsters_loop_update_type

    move_monsters_horizontally:

        jsr move_monster_horizontally

    move_monsters_loop_update_type:

    ldy monster_movement_offset
    lda $8b
    sta ($86),y                 ; Store the changed type.

    move_monsters_next:
    clc
    lda monster_movement_offset
    adc #5
    cmp #$14
    bne move_monsters_exit

    lda #0
    
    move_monsters_exit:
    sta monster_movement_offset
    clc
    rts

move_monster_vertically:    ; $86,$87=monster table
                            ; $88=offset into monster table
                            ; Y=offset into monster table (initially 0)

    iny                         ; Select the y offset.
    lda ($86),y
    sta $89                     ; Temporarily store the y offset.

    lda $8b                     ; Recover the type.
    and #monster_direction_bit
    bne move_monster_down_check ; If not zero then the monster is moving down.

    ; Upward motion

    iny                         ; Select the dy value.
    lda ($86),y
    beq move_monster_up         ; If we are aligned with a cell then
                                ; check that we can move.
        lda #0                      ; Otherwise, set dy = 0 and exit.
        sta ($86),y
        clc
        rts

    move_monster_up:

    lda $89                     ; Recover the y offset.
    beq move_monsters_change_direction

        sec
        sbc #1                  ; y -= 1
        clc

        dey                     ; Select the y offset.
        jsr check_monster_can_move_vertically
        bcs move_monsters_change_direction

        lda $81                 ; Load the tested y value.
        sta ($86),y             ; Store the new y offset and exit.

        iny                     ; Select the dy offset.
        lda #1                  ; dy = 1
        sta ($86),y
        rts

    move_monster_down_check:

    ; Downward motion

    iny                         ; Select the dy value.
    lda ($86),y                 ; If we are aligned with a cell then
    beq move_monster_down       ; check that we can move.

        lda #0                      ; Otherwise, set dy = 0.
        sta ($86),y

        dey                         ; Select the y offset.
        clc
        lda $89
        adc #1                      ; y += 1
        sta ($86),y                 ; Store the new y offset.

        rts

    move_monster_down:

    lda $89                     ; Recover the y offset.
    cmp #bottom_monster_row
    beq move_monsters_change_direction

        dey                     ; Select the y offset.
        adc #1
        jsr check_monster_can_move_vertically
        bcs move_monsters_change_direction

        iny                     ; Select the dy offset.
        lda #1                  ; dy = 1
        sta ($86),y
        rts

move_monsters_change_direction: ; $8b=monster type

    lda $8b                     ; Recover the type.
    eor #monster_direction_bit
    sta $8b
    rts

move_monster_horizontally:  ; $86,$87=monster table
                            ; $88=offset into monster table
                            ; Y=offset into monster table (initially 0)

    lda $8b                     ; Recover the type.
    and #monster_direction_bit
    cmp #$00
    bne move_monster_right

    ; Leftward motion

    lda $8b
    and #monster_dx_bit
    lsr                                 ; Convert the dx value to a bank number.
    cmp bank_number                     ; If we are on the edge of a cell as
                                        ; currently displayed then check for
    bne move_monster_horizontally_move_left ; tiles; otherwise just move.

        lda ($86),y
        sta $80                             ; Store the x position.
        cmp #left_limit                     ; If at the edge of the allowed
        beq move_monsters_change_direction  ; range then move right next time.

        lda bank_number
        bne move_monster_horizontally_check_left

        clc
        dec $80

        move_monster_horizontally_check_left:

        jsr check_monster_can_move_horizontally
        bcs move_monsters_change_direction

    move_monster_horizontally_move_left:

    lda $8b                     ; Recover the type.
    eor #monster_dx_bit         ; dx = !dx
    sta $8b

    and #monster_dx_bit
    beq move_monster_horizontally_exit

    lda ($86),y
    sec
    sbc #1
    sta ($86),y             ; Store the new x offset and exit.

    clc
    rts

    move_monster_right:

    ; Rightward motion

    lda $8b
    and #monster_dx_bit
    lsr                                 ; Convert the dx value to a bank number.
    cmp bank_number                     ; If we are on the edge of a cell as
                                        ; currently displayed then check for
    bne move_monster_horizontally_move_right    ; tiles; otherwise just move.

        lda ($86),y
        sta $80
        cmp #[right_limit-2]                ; If at the edge of the allowed
        beq move_monsters_change_direction  ; range move left next time.

        clc
        adc #2                      ; The monster is two cells wide.
        sta $80

        jsr check_monster_can_move_horizontally
        bcs move_monsters_change_direction

    move_monster_horizontally_move_right:

    lda $8b                     ; Recover the type.
    eor #monster_dx_bit         ; dx = !dx
    sta $8b

    and #monster_dx_bit
    bne move_monster_horizontally_exit

    clc
    lda ($86),y
    adc #1                      ; x += 1
    sta ($86),y                 ; Store the new x offset.

    move_monster_horizontally_exit:

    clc
    rts

check_monster_can_move_vertically:  ; $86,$87=monster entry in table
                                    ; A=y position on screen
                                    ; Y=y offset in monster entry
                                    ; Updates $80=x,$81=y

    sta $81                 ; $81=y position (0-23)
    dey
    lda ($86),y
    sta $80                 ; $80=x position (0-39)
    iny

    lda bank_number
    cmp #1
    bne check_monster_can_move_vertically_next

    inc $80

    check_monster_can_move_vertically_next:

    jsr check_monster_can_move  ; Check the left tile.
    bcs check_monster_can_move_vertically_exit
    
    inc $80
    bcc check_monster_can_move  ; Check the right tile. (C should be clear.)

    check_monster_can_move_vertically_exit:
    rts

check_monster_can_move_horizontally:    ; $86,$87=monster entry in table
                                        ; $80=x position
                                        ; A=x position on screen
                                        ; Y=x offset in monster entry
                                        ; Updates $81=y

    iny
    lda ($86),y
    sta $81                 ; $81=y position (0-23)
    dey

    jsr check_monster_can_move
    bcs check_monster_can_move_horizontally_exit ; Leave immediately if a tile
                                                 ; is found.
    lda bank_number
    cmp #1
    bne check_monster_can_move_horizontally_exit ; Only check additional tiles
                                                 ; on bank 2.
    inc $80
    jsr check_monster_can_move  ; C set if tile is present; C clear otherwise.
    dec $80

    check_monster_can_move_horizontally_exit:
    rts

check_monster_can_move:     ; $80=x position
                            ; $81=y position
                            ; Returns C set if cannot move; C clear otherwise.

    sty $8d

    inc $8a                 ; set the monster flag when checking tiles
    jsr check_tile          ; C set if tile is present; C clear otherwise.
    dec $8a                 ; clear the monster flag

    ldy $8d
    rts

check_monster_player:

    lda ($86),y                     ; Load monster type and dx value.
    and #monster_dx_bit
    lsr
    sta $80

    iny
    lda ($86),y                     ; Load monster x offset.
    asl                             ; Convert to half columns.
    adc $80                         ; Add dx to x.

    cmp #35                         ; Compare the right edge to the character's
    bcc check_monster_common_exit   ; left edge and exit if too far left.
    cmp #42                         ; Compare the left edge to the character's
    bcs check_monster_common_exit   ; right edge and exit if too far right.

    lda player_y                    ; Check for the top of the character.
    asl
    adc player_ys                   ; Store the y position in terms of half
    sta $81                         ; rows.

    iny
    lda ($86),y                     ; Load monster y offset.
    asl                             ; Convert it to half rows.
    iny
    adc ($86),y                     ; Add it to the monster's ys value.

    adc #1                          ; Add haly the monster's height to the
                                    ; offset to help with comparison using
                                    ; its bottom edge.

    cmp $81                         ; Compare to the character's top edge.
    bcc check_monster_common_exit   ; Exit if above the character. This means
                                    ; that the bottom edge could be aligned
                                    ; with the character's top edge.

    sbc #8                          ; Check for the character's bottom edge.
    clc
    cmp $81
    bcs check_monster_common_exit

    jmp player_demise               ; Decrease the number of lives and exit.

check_monster_common_exit:

    clc
    rts

check_player_monsters:

    ldy #0

    check_player_monsters_loop:

        sty $88
        lda ($86),y
        beq check_player_monsters_next

        jsr check_monster_player
        bcs check_monster_common_exit

        check_player_monsters_next:
        clc

        lda $88
        adc #5
        cmp #$14
        beq check_monster_common_exit
        tay
        bne check_player_monsters_loop
