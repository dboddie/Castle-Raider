; Copyright (C) 2014 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $3500

.include "loader-constants.oph"

main:
    lda #22
    jsr $ffee
    lda #5
    jsr $ffee

    lda #23         ; disable flashing cursor
    jsr $ffee
    lda #1
    jsr $ffee
    ldx #7
    cursor_loop:
        lda #0
        jsr $ffee
        dex
        bpl cursor_loop

    jsr set_core_palette

    ; Load miscellaneous routines.

    lda #255
    ldx #<routines_block
    ldy #>routines_block
    jsr $ffdd

    ; Load the sprites.

    lda #255
    ldx #<sprites_block
    ldy #>sprites_block
    jsr $ffdd

    ; Clear the screen.
    lda #12
    jsr $ffee

    ; Display the title.

    jsr draw_title
    jsr plot_characters

    ldx #2
    jsr set_colour

    ldx #0
    show_message_loop:
        lda message_text,x
        jsr $ffee
        inx
        cpx #[message_text_end - message_text]
        bne show_message_loop

    ldx #6
    ldy #29
    jsr tab_x_y                     ; TAB(6, 29)
    ldx #3
    jsr set_colour
    lda #49                         ; "1"
    jsr $ffee

    ldx #13
    ldy #29
    jsr tab_x_y                     ; TAB(13, 29)
    lda #50                         ; "2"
    jsr $ffee

    jsr init_update_title

    title_animation_loop:

        jsr update_title

        ldx #207                    ; 1
        jsr check_key
        beq choose_character_1

        ldx #206                    ; 2
        jsr check_key
        beq choose_character_2

        bne title_animation_loop

    choose_character_2:
    clc
    jsr plot_characters
    jsr switch_characters
    jmp show_instructions

    choose_character_1:
    clc
    jsr plot_characters

    show_instructions:

    ; Write the copyright and license text.

    ldx #0
    ldy #0
    jsr tab_x_y

    ldx #0
    loader_copyright_text_loop:
        lda copyright_text,x
        jsr $ffee
        inx
        cpx #[copyright_text_end - copyright_text]
        bne loader_copyright_text_loop

    ldx #0
    loader_title_text_loop:
        lda title_text,x
        jsr $ffee
        inx
        cpx #[title_text_end - title_text]
        bne loader_title_text_loop

    wait_before_load_loop:
        jsr space_or_fire
        bcs wait_before_load_loop

    clc

    ; Define ENVELOPEs.
    lda #0
    sta $70
    define_envelopes_loop:

        ldx $70
        lda envelopes_high,x
        tay
        lda envelopes_low,x
        tax
        lda #8
        jsr $fff1

        inc $70
        lda $70
        cmp #6
        bne define_envelopes_loop

    ; Configure the interrupt routine.

    jsr cassette_init

    ldx #0
    init_load_window_loop:

        lda init_load_window_vdu_bytes,x
        jsr $ffee
        inx
        cpx #[init_load_window_vdu_bytes_end - init_load_window_vdu_bytes]
        bne init_load_window_loop

    lda #255
    ldx #<levels_block
    ldy #>levels_block
    jsr $ffdd

    lda #255
    ldx #<top_panel_block
    ldy #>top_panel_block
    jsr $ffdd

    lda #255
    ldx #<code_block
    ldy #>code_block
    jsr $ffdd

    jsr cassette_quit

    lda #140
    jsr $fff4   ; *TAPE (reclaim any workspace used on high PAGE systems)
    clc         ; This is apparently needed if we switch from DFS to tape.

    ; Copy the panel onto bank 2.
    jsr copy_panel

    ; Copy the main game code to its place in memory.
    jsr copy_game_code

    ; Store table addresses in zero page locations for convenient access.
    lda #tile_visibility_low
    sta $82
    lda #tile_visibility_high
    sta $83

    lda #special_tile_numbers_low
    sta $84
    lda #special_tile_numbers_high
    sta $85

    lda #monster_positions_low
    sta $86
    lda #monster_positions_high
    sta $87

    jmp code_start_address

tab_x_y:      

    lda #31
    jsr $ffee
    txa
    jsr $ffee
    tya
    jmp $ffee

set_colour:

    lda #17
    jsr $ffee
    txa
    jmp $ffee

set_core_palette:

    lda #2
    sta $70
    lda #2
    sta $71
    jsr set_palette

    lda #3
    sta $70
    lda #3
    sta $71         ; drop through into the subroutine

set_palette:
                    ; $70=logical colour
                    ; $71=physical colour
    lda $70
    sta $cfb
    lda $71
    sta $cfc
    lda #0
    sta $cfd
    sta $cfe
    sta $cff

    lda #$c         
    ldx #$fb
    ldy #$0c
    jsr $fff1
    rts

copy_panel:

    lda #$00
    sta $70
    lda #$30
    sta $71
    lda #$00
    sta $72
    lda #$58
    sta $73

    ldy #0

    copy_top_panel_loop:

        lda ($70),y
        sta ($72),y

        inc $70
        lda $70
        cmp #0
        bne copy_top_panel_loop_next1
        inc $71
        copy_top_panel_loop_next1:
        clc

        inc $72
        lda $72
        cmp #0
        bne copy_top_panel_loop_next2
        inc $73
        copy_top_panel_loop_next2:
        clc

        lda $73
        cmp #$5d
        bne copy_top_panel_loop

    clc
    rts

copy_game_code:

    lda #code_load_low
    sta $70
    lda #code_load_high
    sta $71
    lda #<code_start_address
    sta $72
    lda #>code_start_address
    sta $73

    ldy #0
    copy_game_code_loop:

        lda ($70),y
        sta ($72),y

        inc $70
        lda $70
        cmp #0
        bne copy_game_code_loop_next1
        inc $71
        copy_game_code_loop_next1:
        clc

        inc $72
        lda $72
        cmp #0
        bne copy_game_code_loop_next2
        inc $73
        copy_game_code_loop_next2:
        clc

        lda $70
        cmp #code_end_low
        bne copy_game_code_loop

        lda $71
        cmp #code_end_high
        bne copy_game_code_loop

    clc
    rts

plot8x24_y0:            ; $70,$71=source address
                        ; $72,$73=destination address

    ldx #2

    plot8x24_y0_loop:

        ldy #15

        plotloop8x24_y0_0:
            lda ($70),y
            eor ($72),y
            sta ($72),y
            dey
            bpl plotloop8x24_y0_0

        dex
        bmi plot8x24_y0_exit

        lda $72
        adc #$40
        sta $72
        lda $73
        adc #$01
        sta $73
        clc

        lda $70
        adc #16
        sta $70
        lda $71
        adc #0
        sta $71

        jmp plot8x24_y0_loop

    plot8x24_y0_exit:
    clc
    rts

plot_characters:

    lda #$60                        ; direction offset
    sta $74

    ldy #0
    jsr plot_character

    lda #0                          ; direction offset
    sta $74

    ldy #1
    ; Fall through into the following routine.

plot_character:

    lda #<player_left1
    adc $74                         ; add direction offset
    sta $70
    lda #>player_left1
    adc #0
    sta $71

    lda #$a0
    sta $72
    lda #$77
    sta $73

    cpy #1
    bne plot_character_plot

    clc
    lda $70
    adc #$c0                        ; plot sprites for the second character
    sta $70
    lda $71
    adc #0
    sta $71

    lda $72
    adc #$70                        ; plot 7 characters to the right
    sta $72
    lda $73
    adc #0
    sta $73

    plot_character_plot:
    clc
    jmp plot8x24_y0

switch_characters:

    ; Switch the left and right sprites.
    ldx #95
    switch_characters_left_loop:

        ldy player_left1,x
        lda player_left_alt1,x
        sta player_left1,x
        tya
        sta player_left_alt1,x

        ldy player_right1,x
        lda player_right_alt1,x
        sta player_right1,x
        tya
        sta player_right_alt1,x

        dex
        bpl switch_characters_left_loop

    clc
    rts

routines_block: .byte <routines_file_name, >routines_file_name
                .byte routines_low, routines_high, 0, 0
                .byte routines_low, routines_high, 0, 0
                .byte routines_length_low, routines_length_high, 0, 0
                .byte routines_end_low, routines_end_high, 0, 0

routines_file_name: .byte "ROUTINE", 13

sprites_block: .byte <sprites_file_name, >sprites_file_name
             .byte sprites_file_area_low, sprites_file_area_high, 0, 0
             .byte sprites_file_area_low, sprites_file_area_high, 0, 0
             .byte sprites_file_area_length_low, sprites_file_area_length_high, 0, 0
             .byte sprites_file_area_end_low, sprites_file_area_end_high, 0, 0

sprites_file_name: .byte "SPRITES", 13

levels_block: .byte <levels_file_name, >levels_file_name
             .byte levels_address_low, levels_address_high, 0, 0
             .byte levels_address_low, levels_address_high, 0, 0
             .byte levels_length_low, levels_length_high, 0, 0
             .byte levels_end_low, levels_end_high, 0, 0

levels_file_name: .byte "LEVELS", 13

top_panel_block: .byte <top_panel_file_name, >top_panel_file_name
             .byte top_panel_address_low, top_panel_address_high, 0, 0
             .byte top_panel_address_low, top_panel_address_high, 0, 0
             .byte top_panel_length_low, top_panel_length_high, 0, 0
             .byte top_panel_end_low, top_panel_end_high, 0, 0

top_panel_file_name: .byte "PANEL", 13

code_block: .byte <code_file_name, >code_file_name
             .byte code_load_low, code_load_high, 0, 0
             .byte code_load_low, code_load_high, 0, 0
             .byte code_length_low, code_length_high, 0, 0
             .byte code_end_low, code_end_high, 0, 0

code_file_name: .byte "CODE", 13

message_text: .byte 10, 10, " Choose a character"
message_text_end:

envelopes_low:  .byte <demise_envelope, <item_envelope, <jump_envelope
                .byte <door_envelope, <portal_envelope, <music_envelope
envelopes_high: .byte >demise_envelope, >item_envelope, >jump_envelope
                .byte >door_envelope, >portal_envelope, >music_envelope

demise_envelope:    .byte 1,130,252,250,0,15,15,0,126,0,0,130,126,126
item_envelope:      .byte 2,130,10,254,2,6,2,2,126,0,0,130,126,126
jump_envelope:      .byte 3,129,20,10,5,2,4,4,126,0,0,130,126,126
door_envelope:      .byte 4,129,4,0,252,1,1,1,126,0,0,130,126,126
portal_envelope:    .byte 5,132,16,12,20,1,1,1,126,0,0,130,126,126
music_envelope:     .byte 6,130,1,255,0,2,2,0,126,0,0,130,126,126
;music_envelope:     .byte 6,136,0,16,12,1,1,1,126,0,0,130,126,126

init_load_window_vdu_bytes:
    .byte 31,1,22, "Loading..."
    .byte 28,0,30,19,25,12
    .byte 17,3
init_load_window_vdu_bytes_end:

copyright_text:
            .byte 28,0,24,19,0, 12,26
            .byte 17, 3
            .byte " Copyright (C) 2014", 13,10,10
            .byte 17, 2
            .byte "    David Boddie", 13,10
            .byte 17, 2
            .byte " for Retro Software", 13,10,10
            .byte 17, 1
            .byte "GNU GPL v.3 or later"
copyright_text_end:
title_text: .byte 28,0,19,19,8, 17,129, 12, 17,3, 10
            .byte "     Controls", 13,10,10, 26
            .byte 28,0,19,19,11, 17,130, 12
            .byte 10, 17,0
            .byte " Z ", 17,1, "     Left", 17,0, "  left", 13,10,10
            .byte " X ", 17,1, "     Right", 17,0, " right", 13,10,10
            .byte " Return ", 17,1, "FIRE", 17,0, "  jump", 13,10,10
            .byte " / ", 17,1, "     Down", 17,0, "  enter"
            .byte 26, 17,128
            .byte 31,4,25, 17,1, "Press  SPACE"
            .byte 31,7,27,          "or FIRE"
            .byte 31,2,29,     "to load the game"
title_text_end:

; Flag drawing routines

.alias title_start_address $5e48
.alias title_upper_address $5e4c
.alias title_lower_address $5f84

draw_title:

    lda #7
    sta $74

    draw_title_outer_loop:

        lda $74
        cmp #4
        bcc draw_title_outer_loop_upper

        lda #<title_lower_address
        sta $72
        lda #>title_lower_address
        sta $73

        jmp draw_title_outer_loop_columns

        draw_title_outer_loop_upper:

        lda #<title_upper_address
        sta $72
        lda #>title_upper_address
        sta $73

        draw_title_outer_loop_columns:

        lda #0
        sta $84                     ; column counter

        ldx #0
        draw_title_loop:

            jsr draw_column

            sec
            lda $72
            sbc #$f8
            sta $72
            lda $73
            sbc #$13
            sta $73
            clc

            lda $83                         ; if we encounter a 0xff padding byte
            beq draw_title_loop_no_increment; then increment X to skip past it

            inx

            draw_title_loop_no_increment:

            inc $84
            lda $84
            cmp #38
            beq draw_title_loop_exit
            jmp draw_title_loop

        draw_title_loop_exit:

        dec $74
        bpl draw_title_outer_loop

    draw_title_exit:
    clc
    rts

draw_column:        ; X=offset into the title data
                    ; $72,$73=address of column top
                    ; $74=sub-row plot offset

    lda #0                  ; low/high byte flag
    sta $83

    lda #0                  ; row counter
    sta $82

    lda #$0f                ; start with red
    sta $81

    draw_column_read_next:

    ldy $83                 ; read the low/high flag
    ; load the index of the next colour change
    lda [cassette_markers + markers_length],x

    cpy #0
    bne draw_column_read_next_high

    clc
    and #$0f
    inc $83
    jmp draw_column_loop_begin

    draw_column_read_next_high:
    clc
    dec $83
    and #$f0
    lsr
    lsr
    lsr
    lsr
    inx                     ; the next value will come from the next byte

    draw_column_loop_begin:
    adc $82                 ; add the current index to the row skip
    sta $80                 ; store the next index

    draw_column_loop:

        lda $81             ; load the current colour
        ldy $74
        sta ($72),y

        lda $72             ; move to the next row on the screen
        adc #$40
        sta $72
        lda $73
        adc #$01
        sta $73
        clc

        lda $82
        cmp #$0f            ; if the last row, plot the next column
        beq draw_column_loop_next

        cmp $80             ; compare with the next index
        bne draw_column_loop_continue

        inc $82                     ; increment the row counter
        lda $81
        eor #$f0                    ; red <-> yellow
        sta $81

        jmp draw_column_read_next

        draw_column_loop_continue:

        inc $82                     ; increment the row counter
        jmp draw_column_loop

    draw_column_loop_next:

    lda #$0f
    ldy $74
    sta ($72),y

    clc
    rts

; These tables map row numbers to screen offsets.
update_table_low:  .byte $40, $80, $c0, $00, $40, $80, $c0, $00
                   .byte $40, $80, $c0, $00, $40, $80, $c0, $00

update_table_high: .byte $01, $02, $03, $05, $06, $07, $08, $0a
                   .byte $0b, $0c, $0d, $0f, $10, $11, $12, $14

title_offsets: .byte 3, 2, 2, 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 6, 6, 5, 4

init_update_title:

    lda #0
    sta $78             ; last column to update

    lda #0
    sta $79             ; index of offset to use for the last column

    lda #<update_title1
    sta $7a
    lda #>update_title1
    sta $7b

    rts

update_title1:

    lda $79         ; copy the index into another register for use in the
    sta $80         ; inner loop

    lda #<title_start_address
    sta $72
    lda #>title_start_address
    sta $73

    lda #0
    sta $84                     ; column counter

    lda #0
    sta $75

update_title2:

    ldx $80                 ; look up the offset to use
    lda title_offsets,x
    sta $74

update_column:      ; $72,$73=address of column top
                    ; $74=sub-row plot offset
                    ; $75=offset into title data

    lda #0                  ; low/high byte flag
    sta $83

    lda #0                  ; row counter
    sta $82

    lda #$0f                ; start with red
    sta $81

    lda #$00                ; plot a black line at the top of the column
    ldy $74
    dey
    sta ($72),y

update_column_loop:

        lda $81             ; load the current colour
        ldy $74
        sta ($72),y

        ldy $83                 ; read the low/high flag
        ldx $75                 ; load the index of the next colour change
        lda [cassette_markers + markers_length],x

        cpy #0
        bne update_column_read_next_high

        clc
        and #$0f
        inc $83
        jmp update_column_skip_rows

        update_column_read_next_high:
        clc
        dec $83
        and #$f0
        lsr
        lsr
        lsr
        lsr
        inc $75                 ; the next value will come from the next byte

        update_column_skip_rows:
        clc

        tax
        adc $82                 ; update the row counter with the gap - 1
        sta $82
        inc $82                 ; add 1 to make the row skip the correct size

        lda update_table_low,x
        adc $72
        sta $72
        lda update_table_high,x
        adc $73
        sta $73
        clc

        lda $81
        ldy $74
        dey
        sta ($72),y

        lda $82
        cmp #$10            ; if the last row, plot the next column
        bcs update_column_loop_next

        lda $81
        eor #$f0                    ; red <-> yellow
        sta $81

        jmp update_column_loop

    update_column_loop_next:
    clc

    lda #$0f
    ldy $74
    sta ($72),y

    lda $72
    adc #$40
    sta $76
    lda $73
    adc #$01
    sta $77
    clc

    lda #$00                ; plot a black line at the bottom of the column
    ldy $74
    sta ($76),y

    lda #$0f                ; plot the top of the last row
    dey
    sta ($76),y

update_title3:

    sec
    lda $72
    sbc #$f8
    sta $72
    lda $73
    sbc #$13
    sta $73
    clc

    lda $83                             ; if we encounter a 0xff padding byte
    beq update_title_loop_no_increment  ; then increment X to skip past it

    inc $75

    update_title_loop_no_increment:

    dec $80
    bpl update_title_loop_no_index_reset

    lda #17
    sta $80

    update_title_loop_no_index_reset:
    clc

    lda $84
    cmp $78                     ; update up until the last column
    beq update_title_loop_exit
    inc $84

    jmp update_title2

    update_title_loop_exit:

    lda $78
    cmp #37
    bcs update_title_outer_loop_next

    inc $78

    update_title_outer_loop_next:
    clc

    inc $79
    lda $79
    cmp #18
    bne update_title_outer_loop_no_index_reset

    lda #0
    sta $79

    update_title_outer_loop_no_index_reset:
    clc

    lda #<update_title1
    sta $7a
    lda #>update_title1
    sta $7b

    rts

update_title:

    jmp ($7a)               ; jump to the current title routine
                            ; the routine will use rts to return

cassette_original_irq1v:
cassette_original_irq1v_low: .byte 0
cassette_original_irq1v_high: .byte 0

cassette_init:

    ldx #0
    lda cassette_markers,x      ; total number of markers
    sta $7c

    inx
    ldy #0
    cassette_init_values_loop:

        lda cassette_markers,x      ; load the address of each marker
        sta $70
        inx
        lda cassette_markers,x
        sta $71
        inx
        lda cassette_markers,x      ; store the inverse value in the address
        eor #$ff
        sta ($70),y
        inx

        dec $7c
        bpl cassette_init_values_loop

    stx cassette_markers_end

    sei         ; disable interrupts

    lda $204
    sta cassette_original_irq1v_low
    lda $205
    sta cassette_original_irq1v_high

    lda #<cassette_interrupt_routine
    sta $204
    lda #>cassette_interrupt_routine
    sta $205

    cli         ; enable interrupts
    rts

cassette_quit:
    sei         ; disable interrupts

    lda cassette_original_irq1v_low
    sta $204
    lda cassette_original_irq1v_high
    sta $205

    cli         ; enable interrupts
    rts

cassette_marker_index: .byte 1
cassette_markers_end:  .byte 0
cassette_screen_index_low:  .byte 0
cassette_screen_index_high: .byte 0

.alias progress_bar_start $74d2

cassette_screen_value:  .byte 1
cassette_screen_values: .byte $f0, $c0

cassette_interrupt_routine:
    pha
    txa
    pha
    tya
    pha

    ldx cassette_marker_index       ; load the current index to a marker
    cpx cassette_markers_end        ; compare it to the end index
    beq cassette_interrupt_routine_continue

    lda cassette_markers,x          ; load the address to check
    sta $70
    inx
    lda cassette_markers,x
    sta $71

    ldy #0
    lda ($70),y                     ; load the marker value
    inx
    cmp cassette_markers,x          ; compare it with the value in the table
    bne cassette_interrupt_routine_continue
    clc

    inx
    stx cassette_marker_index       ; store the new index

    lda #<progress_bar_start        ; load the position on the screen to plot to
    adc cassette_screen_index_low
    sta $70
    lda #>progress_bar_start
    adc cassette_screen_index_high
    sta $71
    clc

    ldx cassette_screen_value
    lda cassette_screen_values,x
    ldy #3
    cassette_interrupt_routine_plot_loop:

        sta ($70),y
        dey
        bpl cassette_interrupt_routine_plot_loop

    dec cassette_screen_value
    bpl cassette_interrupt_routine_continue
    clc

    lda #1
    sta cassette_screen_value
    lda cassette_screen_index_low
    adc #8
    sta cassette_screen_index_low
    lda cassette_screen_index_high
    adc #0
    sta cassette_screen_index_high

    cassette_interrupt_routine_continue:
    clc

;    jsr update_title

    pla
    tay
    pla
    tax
    pla
    jmp (cassette_original_irq1v)

cassette_markers:
