; Copyright (C) 2014 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

; The following line contains a placeholder address that the build script
; calculates and fills in.

game_completed:

    ; Do something to indicate the game has been completed.
    ; Check whether the player found the treasures.

    ldx #0
    game_completed_text_loop:

        lda completed_text,x
        jsr $ffee
        inx
        cpx #completed_text_length
        bne game_completed_text_loop

    ldx #0
    game_completed_copy_loop:

        ; Traverse each column in the row

        ldy #0
        game_completed_column_loop:

            lda #4                          ; Draw from column 4 to column 35,
            sta $74
            jsr read_screen_address_bank1   ; $72,$73=address

            lda $73
            sec
            sbc #$0a    ; Subtract 8 rows ($a00) from the address.
            sta $73
            clc

            lda $72     ; Use $70,$71 for the source address.
            sta $70
            lda $73
            adc #$28    ; Find the corresponding bank 2 address.
            sta $71     ; This addition will not cause the carry flag to be set.

            game_completed_copy_inner_loop:

                lda ($70),y
                sta ($72),y

                jsr next_cell   ; Reuse a plotting routine to increase $72,$73
                                ; by 8 and $74 by 1.

                lda $70
                adc #8
                sta $70
                lda $71
                adc #0
                sta $71
                clc

                lda $74
                cmp #36
                bne game_completed_copy_inner_loop

            iny
            cpy #8
            bne game_completed_column_loop

        inx
        cpx #12
        bne game_completed_copy_loop

    game_completed_wait:

    jmp game_completed_wait

    clc
    rts

completed_text: .byte 17,131, 28,2,16,17,5,  12, 26
                .byte 17,130, 28,3,15,16,6, 12, 26
                .byte 17,129, 28,4,14,15,7, 12, 26
completed_text_end:

.alias completed_text_length [completed_text_end - completed_text]
